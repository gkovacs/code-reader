// Generated by LiveScript 1.2.0
(function(){
  var root, textBody, getWordFreq, getDefinitions, getExamples, toText, generateWordBox, expandWord, highlightInSource, wordClicked, tokenize, getUrlParameters;
  root = typeof exports != 'undefined' && exports !== null ? exports : this;
  textBody = root.textBody = 'the quick brown fox jumped over the lazy dog';
  root.fromLang = 'en';
  root.destLang = 'en';
  root.wordToFrequency = {};
  root.wordToInfo = {};
  root.wordsSortedByFreq = [];
  root.wordToSourceIndexes = {};
  getWordFreq = root.getWordFreq = function(word, callback){
    return $.get('/getWordFreq?' + $.param({
      'phrase': word,
      'from': root.fromLang,
      'dest': root.destLang
    }), function(data){
      return callback(null, parseInt(data));
    });
  };
  getDefinitions = root.getDefinitions = function(word, callback){
    return $.get('/getDefinitions?' + $.param({
      'phrase': word,
      'from': root.fromLang,
      'dest': root.destLang
    }), function(data){
      return callback(null, data);
    });
  };
  getExamples = root.getExamples = function(word, callback){
    return $.get('/getExamples?' + $.param({
      'phrase': word,
      'from': root.fromLang,
      'dest': root.destLang
    }), function(data){
      return callback(null, data);
    });
  };
  toText = function(html){
    return $('<span>').html(html).text();
  };
  generateWordBox = function(word, definitions, examples){
    var wordDiv, definitionDiv, x, exampleDiv, childDiv;
    wordDiv = $('<h3>').html(word).css('background-color', 'blue');
    definitionDiv = $('<div>').text((function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = [definitions[0], definitions[1], definitions[2]]).length; i$ < len$; ++i$) {
        x = ref$[i$];
        results$.push(toText(x));
      }
      return results$;
    }()).join('; ')).css('font-style', 'normal');
    exampleDiv = $('<div>').text(toText(examples[0])).css('font-style', 'italic');
    childDiv = $('<div>').append(definitionDiv).append(exampleDiv);
    return childDiv.html();
  };
  expandWord = root.expandWord = function(word){
    var wordIdx, topOffset;
    wordIdx = root.wordsSortedByFreq.indexOf(word);
    if (wordIdx >= 0) {
      $('#explanationDisplay').accordion('option', 'active', wordIdx);
      topOffset = $('#HEADER' + word).offset().top;
      console.log('topOffset is:' + topOffset);
      return $('#rightFrame').animate({
        'scrollTop': topOffset + $('#rightFrame').scrollTop()
      });
    }
  };
  highlightInSource = root.highlightInSource = function(word){
    $('.highlighted').removeClass('highlighted');
    return $('.SOURCE' + word).addClass('highlighted');
  };
  wordClicked = root.wordClicked = function(word){
    highlightInSource(word);
    return expandWord(word);
  };
  tokenize = root.tokenize = function(text, delimiterList){
    var tokenList, currentToken, i$, len$, c;
    tokenList = [];
    currentToken = [];
    for (i$ = 0, len$ = text.length; i$ < len$; ++i$) {
      c = text[i$];
      if (delimiterList.indexOf(c) === -1) {
        currentToken.push(c);
      } else {
        if (currentToken.length > 0) {
          tokenList.push(currentToken.join(''));
        }
        tokenList.push(c);
        currentToken = [];
      }
    }
    if (currentToken.length > 0) {
      tokenList.push(currentToken.join(''));
      currentToken = [];
    }
    return tokenList;
  };
  getUrlParameters = root.getUrlParameters = function(){
    var map, parts;
    map = {};
    parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m, key, value){
      return map[key] = decodeURI(value);
    });
    return map;
  };
  $(document).ready(function(){
    var urlParams, delimiters, tokens, words, i$, len$, word, ref$, idx, token;
    urlParams = getUrlParameters();
    if (urlParams.from != null) {
      root.fromLang = urlParams.from;
    }
    if (urlParams.dest != null) {
      root.destLang = urlParams.dest;
    }
    if (urlParams.text != null) {
      root.textBody = urlParams.text;
    }
    delimiters = [' ', ',', '.', ':'];
    tokens = tokenize(root.textBody, delimiters);
    words = [];
    for (i$ = 0, len$ = tokens.length; i$ < len$; ++i$) {
      word = tokens[i$];
      if (delimiters.indexOf(word) === -1) {
        words.push(word);
      }
    }
    console.log(words);
    for (i$ = 0, len$ = (ref$ = tokenize(root.textBody, delimiters)).length; i$ < len$; ++i$) {
      idx = i$;
      token = ref$[i$];
      if (root.wordToSourceIndexes[token] == null) {
        root.wordToSourceIndexes[token] = [];
      }
      root.wordToSourceIndexes[token].push(idx);
      if (delimiters.indexOf(token) === -1) {
        $('#codeDisplay').append($('<span>').text(token).addClass('SOURCE' + token).attr('onclick', 'wordClicked("' + token + '")'));
      } else {
        $('#codeDisplay').append($('<span>').text(token));
      }
    }
    return async.mapSeries(words, getWordFreq, function(err0, freqResults){
      return async.mapSeries(words, getDefinitions, function(err1, definitionResults){
        return async.mapSeries(words, getExamples, function(err2, exampleResults){
          var i$, ref$, len$, ref1$, word, freq, definitions, examples, res$, isSorted;
          for (i$ = 0, len$ = (ref$ = _.zip(words, freqResults, definitionResults, exampleResults)).length; i$ < len$; ++i$) {
            ref1$ = ref$[i$], word = ref1$[0], freq = ref1$[1], definitions = ref1$[2], examples = ref1$[3];
            if (root.wordToFrequency[word] != null) {
              continue;
            }
            root.wordToFrequency[word] = freq;
            root.wordToInfo[word] = generateWordBox(word, definitions, examples);
          }
          res$ = [];
          for (i$ = 0, len$ = (ref$ = words).length; i$ < len$; ++i$) {
            word = ref$[i$];
            res$.push(word);
          }
          root.wordsSortedByFreq = res$;
          root.wordsSortedByFreq.sort(function(x, y){
            return root.wordToFrequency[x] < root.wordToFrequency[y];
          });
          root.wordsSortedByFreq = _.uniq(wordsSortedByFreq, isSorted = true);
          root.wordsSortedByFreq.reverse();
          for (i$ = 0, len$ = (ref$ = root.wordsSortedByFreq).length; i$ < len$; ++i$) {
            word = ref$[i$];
            console.log(word);
            $('#explanationDisplay').append($('<h3>').html(word).attr('id', 'HEADER' + word));
            $('#explanationDisplay').append($('<div>').html(root.wordToInfo[word]));
          }
          return $('#explanationDisplay').accordion({
            'heightStyle': 'content',
            'collapsible': true,
            'active': false,
            'animate': false,
            'activate': function(event, ui){
              return highlightInSource(ui.newHeader.text());
            }
          });
        });
      });
    });
  });
}).call(this);
